import java.util.Arrays;
import java.util.Random;
import java.util.Scanner;

public class BinarySearchProgram {

    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);

        // Step 1: Enter number of elements in array
        int arraySize = GetPositiveInteger(scanner, "Enter number of array: ");

        // Step 2: Generate sorted random array
        int[] array = GenerateSortedRandomArray(arraySize);
        // int[] array = {1, 1, 1, 1, 3, 4, 6, 8, 9, 9}; // For fixed test

        // Step 3: Display generated array
        DisplayArray(array);

        // Step 4: Perform binary search
        int searchValue = GetPositiveInteger(scanner, "Enter value to search: ");
        int index = DoBinarySearch(array, searchValue);
        DisplaySearchResult(index, array, searchValue);

        // Step 5: Run manual test cases
        RunInteractiveTestCases(scanner);

        scanner.close();
    }

    public static int GetPositiveInteger(Scanner scanner, String message) {
        int number;
        while (true) {
            System.out.println(message);
            String input = scanner.nextLine().trim();

            // Condition: input is empty
            if (input.isEmpty()) {
                System.out.println("Invalid input! Input cannot be empty.");
                continue;
            }

            try {
                number = Integer.parseInt(input);
                if (number > 0) {
                    return number;
                } else {
                    System.out.println("Invalid input! Please enter a positive integer greater than 0.");
                }
            } catch (NumberFormatException e) {
                System.out.println("Invalid input! Please enter a valid integer.");
            }
        }
    }

    public static int[] GenerateSortedRandomArray(int size) {
        int[] array = new int[size];
        Random random = new Random();

        // Loop: generate random integers
        for (int i = 0; i < size; i++) {
            array[i] = random.nextInt(301) - 100; // -100 to 200
        }

        Arrays.sort(array); // Sort array before binary search
        return array;
    }

    public static void DisplayArray(int[] array) {
        System.out.println("Sorted array: " + Arrays.toString(array));
    }

    public static int DoBinarySearch(int[] array, int binarySearch) {
        int left = 0;
        int right = array.length - 1;

        // Loop: binary search logic
        while (left <= right) {
            int mid = left + (right - left) / 2;

            if (array[mid] == binarySearch) return mid;
            if (array[mid] < binarySearch) left = mid + 1;
            else right = mid - 1;
        }

        return -1; // Not found
    }

    public static void DisplaySearchResult(int index, int[] array, int binarySearch) {
        if (index != -1) {
            System.out.println("Value " + binarySearch + " found at index: " + index);
        } else {
            System.out.println("Value " + binarySearch + " not found in the array.");
        }
    }

    public static void RunInteractiveTestCases(Scanner scanner) {
        int[] testArray = {-1, 5, 6, 18, 19, 25, 46, 78, 102, 114};

        System.out.println("\n==== Binary Search Test Mode ====");
        DisplayArray(testArray);

        while (true) {
            System.out.print("\nEnter value to test (or type 'exit' to quit): ");
            String input = scanner.nextLine().trim();

            // Condition: exit command
            if (input.equalsIgnoreCase("exit")) {
                System.out.println("Exiting test mode.");
                break;
            }

            try {
                int value = Integer.parseInt(input);
                ShowBinarySearchSteps(testArray, value);
            } catch (NumberFormatException e) {
                System.out.println("Invalid input! Please enter a valid integer or 'exit'.");
            }
        }
    }

    public static void ShowBinarySearchSteps(int[] array, int binarySearch) {
        int left = 0;
        int right = array.length - 1;
        int step = 1;

        // Loop: simulate binary search
        while (left <= right) {
            int mid = left + (right - left) / 2;
            int midValue = array[mid];

            System.out.print("Step " + step + " (middle element is " + midValue);
            if (midValue == binarySearch) {
                System.out.print(" == " + binarySearch + "): ");
            } else if (midValue < binarySearch) {
                System.out.print(" < " + binarySearch + "): ");
            } else {
                System.out.print(" > " + binarySearch + "): ");
            }

            // Highlight mid element
            for (int i = 0; i < array.length; i++) {
                if (i == mid) {
                    System.out.print("[" + array[i] + "] ");
                } else {
                    System.out.print(array[i] + " ");
                }
            }
            System.out.println();

            if (midValue == binarySearch) {
                System.out.println("=> Found at index: " + mid + "\n");
                return;
            }

            if (midValue < binarySearch) {
                left = mid + 1;
            } else {
                right = mid - 1;
            }

            step++;
        }

        System.out.println("=> Searched value is absent\n");
    }
}
