import java.util.Arrays;
import java.util.Random;
import java.util.Scanner;

public class BinarySearchProgram {

    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);

        // Step 1: Enter number of elements in array
        int arraySize = GetPositiveInteger(scanner, "Enter number of array: ");

        // Step 2: Enter value to search
        int binarySearch = GetPositiveInteger(scanner, "Enter search value: ");

        // Step 3: Generate sorted array
//        int[] array = GenerateSortedRandomArray(arraySize);

        // Use fixed array for testing/debugging
        int[] array = {1, 1, 1, 1, 3, 4, 6, 8, 9, 9};

        // Step 4: Display array
        DisplayArray(array);

        // Step 5: Perform binary search
        int index = DoBinarySearch(array, binarySearch);

        // Step 6: Display result
        DisplaySearchResult(index, array, binarySearch);

        RunTestExamples();

        scanner.close();
    }

    public static int GetPositiveInteger(Scanner scanner, String message) {
        int number;

        // loop infinity
        while (true) {
            System.out.println(message);
            String input = scanner.nextLine().trim();
            
            //check if input empty
            if (input.isEmpty()) {
            System.out.println("Invalid input! Input cannot be empty.");
            continue;
        }

           try {
            number = Integer.parseInt(input);
            // check if the entered number > 0 
            if (number > 0) {
                return number; 
            } else {
                System.out.println("Invalid input! Please enter a positive integer greater than 0.");
            }
        } catch (NumberFormatException e) {
            System.out.println("Invalid input! Please enter a valid integer.");
        }
    }
}

    public static int[] GenerateSortedRandomArray(int size) {
        int[] array = new int[size];
        Random random = new Random();

        // Loop: assign random value to each element
        for (int i = 0; i < size; i++) {
            array[i] = random.nextInt(301) - 100; // Range: -100 to 200
        }

        // Sort the array
        Arrays.sort(array);
        return array;
    }

    public static void DisplayArray(int[] array) {
        // Display array as string
        System.out.println("Sorted array: " + Arrays.toString(array));
    }

    public static int DoBinarySearch(int[] array, int binarySearch) {
        int left = 0;
        int right = array.length - 1;

        // Loop: repeat until search range is exhausted
        while (left <= right) {
            // Calculate middle index
            int mid = left + (right - left) / 2;

            // Check if middle value matches binarySearch
            if (array[mid] == binarySearch) {
                return mid;
            }

            // If middle value less than binarySearch, search right half
            if (array[mid] < binarySearch) {
                left = mid + 1;
            } else {
                // If middle value greater than binarySearch, search left half
                right = mid - 1;
            }
        }

        // Target not found
        return -1;
    }

    public static void DisplaySearchResult(int index, int[] array, int binarySearch) {
        // Check if binarySearch found
        if (index != -1) {
            System.out.println("Value " + binarySearch + " found at index: " + index);
        } else {
            // If not found
            System.out.println("Value " + binarySearch + " not found in the array.");
        }
    }

    public static void RunTestExamples() {
        int[] sampleArray = {-1, 5, 6, 18, 19, 25, 46, 78, 102, 114};

        // Example 1: Target is present
        System.out.println("\n==== Example 1: Find 6 in sample array ====");
        ShowBinarySearchSteps(sampleArray, 6);

        // Example 2: Target is absent
        System.out.println("\n==== Example 2: Find 103 in sample array ====");
        ShowBinarySearchSteps(sampleArray, 103);
    }

    public static void ShowBinarySearchSteps(int[] array, int binarySearch) {
        int left = 0;
        int right = array.length - 1;
        int step = 1;

        // Loop: simulate binary search step-by-step
        while (left <= right) {
            // Calculate middle index and value
            int mid = left + (right - left) / 2;
            int midValue = array[mid];

            // Print current step information
            System.out.print("Step " + step + " (middle element is " + midValue);

            // Display comparison
            if (midValue == binarySearch) {
                System.out.print(" == " + binarySearch + "): ");
            } else if (midValue < binarySearch) {
                System.out.print(" < " + binarySearch + "): ");
            } else {
                System.out.print(" > " + binarySearch + "): ");
            }

            // Print array with middle element highlighted
            for (int i = 0; i < array.length; i++) {
                if (i == mid) {
                    System.out.print("[" + array[i] + "] ");
                } else {
                    System.out.print(array[i] + " ");
                }
            }
            System.out.println();

            // If found, display result and exit
            if (midValue == binarySearch) {
                System.out.println("=> Found at index: " + mid + "\n");
                return;
            }

            // Adjust search bounds
            if (midValue < binarySearch) {
                left = mid + 1;
            } else {
                right = mid - 1;
            }

            step++; // Increase step count
        }

        // After loop: value not found
        System.out.println("=> Searched value is absent\n");
    }
}
