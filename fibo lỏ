package fibonacci;

import java.util.ArrayList;

public class FibonacciGenerator {

    public static void main(String[] args) {
        ArrayList<Integer> sequence = new ArrayList<>();

        // Step 1: Use recursion to generate the first 45 Fibonacci numbers
        GenerateSequence(sequence, 45);

        // Step 2: Show the full Fibonacci sequence
        ShowSequence(sequence);

        // Optional: Display each Fibonacci number with its index
        DisplayEachElement(sequence);
    }

    // Function: Recursively generate 'limit' Fibonacci numbers
    public static void GenerateSequence(ArrayList<Integer> seq, int limit) {
        // Condition: Add first two base values
        if (seq.isEmpty()) {
            seq.add(0);
            seq.add(1);
        }

        // Condition: Stop recursion if enough values generated
        if (seq.size() >= limit) return;

        // Recursive step: add sum of last two numbers
        int next = seq.get(seq.size() - 1) + seq.get(seq.size() - 2);
        seq.add(next);
        GenerateSequence(seq, limit);
    }

    // Function: Print the entire Fibonacci sequence in one line
    public static void ShowSequence(ArrayList<Integer> seq) {
        System.out.println("Generated Fibonacci sequence:");
        for (int i = 0; i < seq.size(); i++) {
            System.out.print(seq.get(i));
            // Condition: avoid trailing comma
            if (i < seq.size() - 1) System.out.print(", ");
        }
        System.out.println();
    }

    // Function: Print each number with its index (1-based)
    public static void DisplayEachElement(ArrayList<Integer> seq) {
        for (int i = 0; i < seq.size(); i++) {
            System.out.printf("Element %d: %d%n", i + 1, seq.get(i));
        }
    }
}
