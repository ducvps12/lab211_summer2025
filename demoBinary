import java.util.Arrays;
import java.util.Random;
import java.util.Scanner;

public class BinarySearchProgram {

    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);

        // Step 1: Enter the number of array elements
        int arraySize = getPositiveInteger(scanner, "Enter number of array: ");

        // Step 2: Generate a sorted random array
        int[] array = generateSortedRandomArray(arraySize);
        displayArray(array);

        // Step 3: Perform Binary Search with user input
        int searchValue = getPositiveInteger(scanner, "Enter value to search: ");
        int index = binarySearchWithSteps(array, searchValue); // Show steps optional (you can comment)

        displaySearchResult(index, array, searchValue);

        // Step 4: Manual test with step-by-step display
        runManualTest(scanner);

        scanner.close();
    }

    public static int getPositiveInteger(Scanner scanner, String message) {
        int number;
        while (true) {
            System.out.print(message);
            String input = scanner.nextLine().trim();

            if (input.isEmpty()) {
                System.out.println("Input cannot be empty!");
                continue;
            }

            try {
                number = Integer.parseInt(input);
                if (number > 0) return number;
                else System.out.println("Please enter a positive integer greater than 0.");
            } catch (NumberFormatException e) {
                System.out.println("Invalid number, please try again.");
            }
        }
    }

    public static int[] generateSortedRandomArray(int size) {
        int[] array = new int[size];
        Random random = new Random();

        for (int i = 0; i < size; i++) {
            array[i] = random.nextInt(301) - 100; // Random numbers from -100 to 200
        }

        Arrays.sort(array);
        return array;
    }

    public static void displayArray(int[] array) {
        System.out.println("Sorted array: " + Arrays.toString(array));
    }

    // Binary Search with optional step display (can comment/uncomment freely)
    public static int binarySearchWithSteps(int[] array, int searchValue) {
        int left = 0, right = array.length - 1;
        int step = 1;

        while (left <= right) {
            int mid = left + (right - left) / 2;
            int midValue = array[mid];

            // Uncomment below to show step details
            // System.out.print("Step " + step + " (middle element is " + midValue);
            //
            // if (midValue == searchValue) {
            //     System.out.print(" == " + searchValue + "): ");
            // } else if (midValue < searchValue) {
            //     System.out.print(" < " + searchValue + "): ");
            // } else {
            //     System.out.print(" > " + searchValue + "): ");
            // }
            //
            // for (int i = 0; i < array.length; i++) {
            //     if (i == mid) {
            //         System.out.print("[" + array[i] + "] ");
            //     } else {
            //         System.out.print(array[i] + " ");
            //     }
            // }
            // System.out.println();

            if (midValue == searchValue) {
                // Uncomment below to show found step
                // System.out.println("=> Found at index: " + mid + "\n");
                return mid;
            }

            if (midValue < searchValue) {
                left = mid + 1;
            } else {
                right = mid - 1;
            }
            step++;
        }

        // Uncomment below to show not found
        // System.out.println("=> Searched value is absent\n");
        return -1;
    }

    public static void displaySearchResult(int index, int[] array, int searchValue) {
        if (index != -1) {
            System.out.println("Value " + searchValue + " found at index: " + index);
        } else {
            System.out.println("Value " + searchValue + " not found in the array.");
        }
    }

    public static void runManualTest(Scanner scanner) {
        int[] testArray = {-1, 5, 6, 18, 19, 25, 46, 78, 102, 114};
        System.out.println("\n==== Manual Binary Search Test ====");
        displayArray(testArray);

        while (true) {
            System.out.print("\nEnter value to test (or type 'exit' to quit): ");
            String input = scanner.nextLine().trim();

            if (input.equalsIgnoreCase("exit")) {
                System.out.println("Exiting manual test mode.");
                break;
            }

            try {
                int value = Integer.parseInt(input);
                int index = binarySearchWithSteps(testArray, value); // Show steps optional
                displaySearchResult(index, testArray, value);
            } catch (NumberFormatException e) {
                System.out.println("Invalid input! Please enter a valid integer or 'exit'.");
            }
        }
    }
}
