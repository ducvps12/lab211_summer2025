



import java.util.Arrays;
import java.util.Random;
import java.util.Scanner;

public class BinarySearchProgram {

    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);

        // Step 1: Get array size from user
        int arraySize = GetPositiveInteger(scanner, "Enter number of array: ");

        // Step 2: Generate sorted random array
    int[] array = GenerateSortedRandomArray(arraySize);
       
        // Step 3: Display sorted array
        DisplayArray(array);

        // Step 4: Get search target from user
        int target = GetPositiveInteger(scanner, "Enter search value: ");

        // Step 5: Perform binary search and display result
        DisplaySearchResult(array, target);


    }

   public static int GetPositiveInteger(Scanner scanner, String message) {
    int number;

    while (true) {
        System.out.println(message);

       // Loop until user enters an integer
        if (scanner.hasNextInt()) {
            number = scanner.nextInt();
            scanner.nextLine(); // Clear buffer after input

       // Check if number is positive
            if (number > 0) {
                return number; // Valid input
            } else {
                System.out.println("Invalid input! Please enter a positive integer greater than 0.");
            }
        } else {
            System.out.println("Invalid input! Please enter a positive integer.");
            scanner.nextLine(); // Skip invalid line
        }
    }
}


    public static int[] GenerateSortedRandomArray(int size) {
        int[] array = new int[size];
        Random random = new Random();

      
        // Loop to fill array with random integers
        for (int i = 0; i < size; i++) {
            array[i] = random.nextInt(301) - 100; // Generate number between -100 and 200
        }

        // Sort array before binary search
        Arrays.sort(array);
        return array;
    }


    public static void DisplayArray(int[] array) {
        System.out.println("Sorted array: " + Arrays.toString(array));
    }

    
    public static void DisplaySearchResult(int[] array, int target) {
        int index = DoBinarySearch(array, target);

        // Condition: target found
        if (index != -1) {
            System.out.println("Value " + target + " found at index: " + index);
        } else {
            //  target not found
            System.out.println("Value " + target + " not found in the array.");
        }
    }

    public static int DoBinarySearch(int[] array, int target) {
        int left = 0;
        int right = array.length - 1;

      
        // Keep searching while left index is <= right index
        while (left <= right) {
            int mid = left + (right - left) / 2; // Calculate middle index

            //   // Found the target
            if (array[mid] == target) {
                return mid;
            }

            //Target is in the right half
            if (array[mid] < target) {
                left = mid + 1;
            } else {
                // Condition: target smaller than mid value
                right = mid - 1;
            }
        }

        // Target not found
        return -1;
    }


}
