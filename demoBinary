import java.util.Arrays;
import java.util.Random;
import java.util.Scanner;

public class BinarySearch {

    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);

        // Get number of array elements from user
        int arraySize = GetPositiveInteger(scanner, "Enter number of array elements: ");

        // Generate sorted array with random integers
        int[] array = GenerateSortedRandomArray(arraySize);

        // Get search value from user
        int searchValue = GetPositiveInteger(scanner, "Enter value to search: ");

        // Display sorted array
        DisplayArray(array);

        // Perform search and display result
        DisplaySearchResult(array, searchValue);

        // Run test examples (Ctrl + / to enable)
        // RunTestExamples();
    }

    // Ask user to enter a positive integer
    public static int GetPositiveInteger(Scanner scanner, String message) {
        int number;
        do {
            System.out.print(message);

            // Read user input
            number = scanner.nextInt();
        } while (number <= 0); // Condition: input must be > 0
        return number;
    }

    // Generate an array with random integers and sort it
    public static int[] GenerateSortedRandomArray(int size) {
        int[] arr = new int[size];

        // Loop: generate random numbers for array
        for (int i = 0; i < size; i++) {
            // Generate number from -100 to 100
            arr[i] = new Random().nextInt(201) - 100;
        }

        // Sort array before binary search
        Arrays.sort(arr);
        return arr;
    }

    // Print array elements
    public static void DisplayArray(int[] arr) {
        System.out.println("Sorted array: " + Arrays.toString(arr));
    }

    // Call binary search and display result to user
    public static void DisplaySearchResult(int[] arr, int target) {
        // Perform binary search
        int index = DoBinarySearch(arr, target);

        // Condition: value found
        if (index != -1) {
            System.out.println("Value " + target + " found at index: " + index);
        } else {
            // Condition: value not found
            System.out.println("Value " + target + " not found in array.");
        }
    }

    // Perform binary search to find target in array
    public static int DoBinarySearch(int[] arr, int target) {
        // Set initial boundaries
        int left = 0;
        int right = arr.length - 1;

        // Loop: binary search while range is valid
        while (left <= right) {
            // Get middle index
            int mid = (left + right) / 2;

            // Get value at middle index
            int midValue = arr[mid];

            // Condition: target found
            if (midValue == target) {
                return mid;
            }

            // Condition: search right half
            if (midValue < target) {
                left = mid + 1;
            } else {
                // Condition: search left half
                right = mid - 1;
            }
        }

        // Value not found
        return -1;
    }

    // Run 3 fixed test cases with detailed steps
    public static void RunTestExamples() {
        int[] sample = {-1, 5, 6, 18, 19, 25, 46, 78, 102, 114};

        System.out.println("\nExample 1. Find 6 in " + Arrays.toString(sample));
        ShowBinarySearchSteps(sample, 6);

        System.out.println("\nExample 2. Find 103 in " + Arrays.toString(sample));
        ShowBinarySearchSteps(sample, 103);

        System.out.println("\nExample 3. Find 25 in " + Arrays.toString(sample));
        ShowBinarySearchSteps(sample, 25);
    }

    // Show each binary search step exactly like sample examples
    public static void ShowBinarySearchSteps(int[] arr, int target) {
        // Set initial range
        int left = 0;
        int right = arr.length - 1;

        // Step counter
        int step = 1;

        // Loop: perform binary search with printed steps
        while (left <= right) {
            // Get middle index
            int mid = (left + right) / 2;

            // Get middle value
            int midValue = arr[mid];

            // Print step description
            System.out.print("Step " + step + " (middle element is " + midValue);
            if (midValue == target) {
                System.out.print(" == " + target + "): ");
            } else if (midValue < target) {
                System.out.print(" < " + target + "): ");
            } else {
                System.out.print(" > " + target + "): ");
            }

            // Print full array with mid element highlighted
            for (int i = 0; i < arr.length; i++) {
                if (i == mid) {
                    System.out.print("[" + arr[i] + "] ");
                } else {
                    System.out.print(arr[i] + " ");
                }
            }
            System.out.println();

            // Condition: found target
            if (midValue == target) {
                System.out.println("=> Found at index " + mid + "\n");
                return;
            }

            // Condition: target is greater
            if (midValue < target) {
                left = mid + 1;
            } else {
                // Condition: target is smaller
                right = mid - 1;
            }

            // Increase step counter
            step++;
        }

        // Value not found
        System.out.println("=> Searched value is absent\n");
    }
}
